// Generated by gencpp from file rr_openrover_basic/RawRrOpenroverBasicSlowRateData.msg
// DO NOT EDIT!


#ifndef RR_OPENROVER_BASIC_MESSAGE_RAWRROPENROVERBASICSLOWRATEDATA_H
#define RR_OPENROVER_BASIC_MESSAGE_RAWRROPENROVERBASICSLOWRATEDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace rr_openrover_basic
{
template <class ContainerAllocator>
struct RawRrOpenroverBasicSlowRateData_
{
  typedef RawRrOpenroverBasicSlowRateData_<ContainerAllocator> Type;

  RawRrOpenroverBasicSlowRateData_()
    : header()
    , reg_motor_fault_flag_left(0)
    , reg_motor_temp_left(0)
    , reg_motor_temp_right(0)
    , reg_power_bat_voltage_a(0)
    , reg_power_bat_voltage_b(0)
    , reg_robot_rel_soc_a(0)
    , reg_robot_rel_soc_b(0)
    , battery_mode_a(0)
    , battery_mode_b(0)
    , battery_temp_a(0)
    , battery_temp_b(0)
    , battery_voltage_a(0)
    , battery_voltage_b(0)
    , buildno(0)  {
    }
  RawRrOpenroverBasicSlowRateData_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , reg_motor_fault_flag_left(0)
    , reg_motor_temp_left(0)
    , reg_motor_temp_right(0)
    , reg_power_bat_voltage_a(0)
    , reg_power_bat_voltage_b(0)
    , reg_robot_rel_soc_a(0)
    , reg_robot_rel_soc_b(0)
    , battery_mode_a(0)
    , battery_mode_b(0)
    , battery_temp_a(0)
    , battery_temp_b(0)
    , battery_voltage_a(0)
    , battery_voltage_b(0)
    , buildno(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int32_t _reg_motor_fault_flag_left_type;
  _reg_motor_fault_flag_left_type reg_motor_fault_flag_left;

   typedef int32_t _reg_motor_temp_left_type;
  _reg_motor_temp_left_type reg_motor_temp_left;

   typedef int32_t _reg_motor_temp_right_type;
  _reg_motor_temp_right_type reg_motor_temp_right;

   typedef int32_t _reg_power_bat_voltage_a_type;
  _reg_power_bat_voltage_a_type reg_power_bat_voltage_a;

   typedef int32_t _reg_power_bat_voltage_b_type;
  _reg_power_bat_voltage_b_type reg_power_bat_voltage_b;

   typedef int32_t _reg_robot_rel_soc_a_type;
  _reg_robot_rel_soc_a_type reg_robot_rel_soc_a;

   typedef int32_t _reg_robot_rel_soc_b_type;
  _reg_robot_rel_soc_b_type reg_robot_rel_soc_b;

   typedef uint16_t _battery_mode_a_type;
  _battery_mode_a_type battery_mode_a;

   typedef uint16_t _battery_mode_b_type;
  _battery_mode_b_type battery_mode_b;

   typedef uint16_t _battery_temp_a_type;
  _battery_temp_a_type battery_temp_a;

   typedef uint16_t _battery_temp_b_type;
  _battery_temp_b_type battery_temp_b;

   typedef uint16_t _battery_voltage_a_type;
  _battery_voltage_a_type battery_voltage_a;

   typedef uint16_t _battery_voltage_b_type;
  _battery_voltage_b_type battery_voltage_b;

   typedef int32_t _buildno_type;
  _buildno_type buildno;





  typedef boost::shared_ptr< ::rr_openrover_basic::RawRrOpenroverBasicSlowRateData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rr_openrover_basic::RawRrOpenroverBasicSlowRateData_<ContainerAllocator> const> ConstPtr;

}; // struct RawRrOpenroverBasicSlowRateData_

typedef ::rr_openrover_basic::RawRrOpenroverBasicSlowRateData_<std::allocator<void> > RawRrOpenroverBasicSlowRateData;

typedef boost::shared_ptr< ::rr_openrover_basic::RawRrOpenroverBasicSlowRateData > RawRrOpenroverBasicSlowRateDataPtr;
typedef boost::shared_ptr< ::rr_openrover_basic::RawRrOpenroverBasicSlowRateData const> RawRrOpenroverBasicSlowRateDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rr_openrover_basic::RawRrOpenroverBasicSlowRateData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rr_openrover_basic::RawRrOpenroverBasicSlowRateData_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace rr_openrover_basic

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'rr_openrover_basic': ['/home/nick/aws-robomaker-sample-application-roverrobotics/robot_ws/src/rr_openrover_basic/msg'], 'geometry_msgs': ['/opt/ros/melodic/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/melodic/share/actionlib_msgs/cmake/../msg'], 'nav_msgs': ['/opt/ros/melodic/share/nav_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::rr_openrover_basic::RawRrOpenroverBasicSlowRateData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rr_openrover_basic::RawRrOpenroverBasicSlowRateData_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rr_openrover_basic::RawRrOpenroverBasicSlowRateData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rr_openrover_basic::RawRrOpenroverBasicSlowRateData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rr_openrover_basic::RawRrOpenroverBasicSlowRateData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rr_openrover_basic::RawRrOpenroverBasicSlowRateData_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rr_openrover_basic::RawRrOpenroverBasicSlowRateData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "81c26593ff4507cd00407918de2b2593";
  }

  static const char* value(const ::rr_openrover_basic::RawRrOpenroverBasicSlowRateData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x81c26593ff4507cdULL;
  static const uint64_t static_value2 = 0x00407918de2b2593ULL;
};

template<class ContainerAllocator>
struct DataType< ::rr_openrover_basic::RawRrOpenroverBasicSlowRateData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rr_openrover_basic/RawRrOpenroverBasicSlowRateData";
  }

  static const char* value(const ::rr_openrover_basic::RawRrOpenroverBasicSlowRateData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rr_openrover_basic::RawRrOpenroverBasicSlowRateData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
int32 reg_motor_fault_flag_left\n\
int32 reg_motor_temp_left\n\
int32 reg_motor_temp_right\n\
int32 reg_power_bat_voltage_a\n\
int32 reg_power_bat_voltage_b\n\
int32 reg_robot_rel_soc_a\n\
int32 reg_robot_rel_soc_b\n\
uint16 battery_mode_a\n\
uint16 battery_mode_b\n\
uint16 battery_temp_a\n\
uint16 battery_temp_b\n\
uint16 battery_voltage_a\n\
uint16 battery_voltage_b\n\
int32 buildno\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::rr_openrover_basic::RawRrOpenroverBasicSlowRateData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rr_openrover_basic::RawRrOpenroverBasicSlowRateData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.reg_motor_fault_flag_left);
      stream.next(m.reg_motor_temp_left);
      stream.next(m.reg_motor_temp_right);
      stream.next(m.reg_power_bat_voltage_a);
      stream.next(m.reg_power_bat_voltage_b);
      stream.next(m.reg_robot_rel_soc_a);
      stream.next(m.reg_robot_rel_soc_b);
      stream.next(m.battery_mode_a);
      stream.next(m.battery_mode_b);
      stream.next(m.battery_temp_a);
      stream.next(m.battery_temp_b);
      stream.next(m.battery_voltage_a);
      stream.next(m.battery_voltage_b);
      stream.next(m.buildno);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RawRrOpenroverBasicSlowRateData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rr_openrover_basic::RawRrOpenroverBasicSlowRateData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rr_openrover_basic::RawRrOpenroverBasicSlowRateData_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "reg_motor_fault_flag_left: ";
    Printer<int32_t>::stream(s, indent + "  ", v.reg_motor_fault_flag_left);
    s << indent << "reg_motor_temp_left: ";
    Printer<int32_t>::stream(s, indent + "  ", v.reg_motor_temp_left);
    s << indent << "reg_motor_temp_right: ";
    Printer<int32_t>::stream(s, indent + "  ", v.reg_motor_temp_right);
    s << indent << "reg_power_bat_voltage_a: ";
    Printer<int32_t>::stream(s, indent + "  ", v.reg_power_bat_voltage_a);
    s << indent << "reg_power_bat_voltage_b: ";
    Printer<int32_t>::stream(s, indent + "  ", v.reg_power_bat_voltage_b);
    s << indent << "reg_robot_rel_soc_a: ";
    Printer<int32_t>::stream(s, indent + "  ", v.reg_robot_rel_soc_a);
    s << indent << "reg_robot_rel_soc_b: ";
    Printer<int32_t>::stream(s, indent + "  ", v.reg_robot_rel_soc_b);
    s << indent << "battery_mode_a: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.battery_mode_a);
    s << indent << "battery_mode_b: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.battery_mode_b);
    s << indent << "battery_temp_a: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.battery_temp_a);
    s << indent << "battery_temp_b: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.battery_temp_b);
    s << indent << "battery_voltage_a: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.battery_voltage_a);
    s << indent << "battery_voltage_b: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.battery_voltage_b);
    s << indent << "buildno: ";
    Printer<int32_t>::stream(s, indent + "  ", v.buildno);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RR_OPENROVER_BASIC_MESSAGE_RAWRROPENROVERBASICSLOWRATEDATA_H
