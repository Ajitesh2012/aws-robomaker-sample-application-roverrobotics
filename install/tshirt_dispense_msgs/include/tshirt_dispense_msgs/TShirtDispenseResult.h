// Generated by gencpp from file tshirt_dispense_msgs/TShirtDispenseResult.msg
// DO NOT EDIT!


#ifndef TSHIRT_DISPENSE_MSGS_MESSAGE_TSHIRTDISPENSERESULT_H
#define TSHIRT_DISPENSE_MSGS_MESSAGE_TSHIRTDISPENSERESULT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tshirt_dispense_msgs
{
template <class ContainerAllocator>
struct TShirtDispenseResult_
{
  typedef TShirtDispenseResult_<ContainerAllocator> Type;

  TShirtDispenseResult_()
    : code(0)  {
    }
  TShirtDispenseResult_(const ContainerAllocator& _alloc)
    : code(0)  {
  (void)_alloc;
    }



   typedef int32_t _code_type;
  _code_type code;





  typedef boost::shared_ptr< ::tshirt_dispense_msgs::TShirtDispenseResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tshirt_dispense_msgs::TShirtDispenseResult_<ContainerAllocator> const> ConstPtr;

}; // struct TShirtDispenseResult_

typedef ::tshirt_dispense_msgs::TShirtDispenseResult_<std::allocator<void> > TShirtDispenseResult;

typedef boost::shared_ptr< ::tshirt_dispense_msgs::TShirtDispenseResult > TShirtDispenseResultPtr;
typedef boost::shared_ptr< ::tshirt_dispense_msgs::TShirtDispenseResult const> TShirtDispenseResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tshirt_dispense_msgs::TShirtDispenseResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tshirt_dispense_msgs::TShirtDispenseResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace tshirt_dispense_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'tshirt_dispense_msgs': ['/home/nickp/Desktop/aws-robomaker-sample-application-roverrobotics/build/tshirt_dispense_msgs/devel/share/tshirt_dispense_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::tshirt_dispense_msgs::TShirtDispenseResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tshirt_dispense_msgs::TShirtDispenseResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tshirt_dispense_msgs::TShirtDispenseResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tshirt_dispense_msgs::TShirtDispenseResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tshirt_dispense_msgs::TShirtDispenseResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tshirt_dispense_msgs::TShirtDispenseResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tshirt_dispense_msgs::TShirtDispenseResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5e8de1acec506dc927ef4d2e8193b594";
  }

  static const char* value(const ::tshirt_dispense_msgs::TShirtDispenseResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5e8de1acec506dc9ULL;
  static const uint64_t static_value2 = 0x27ef4d2e8193b594ULL;
};

template<class ContainerAllocator>
struct DataType< ::tshirt_dispense_msgs::TShirtDispenseResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tshirt_dispense_msgs/TShirtDispenseResult";
  }

  static const char* value(const ::tshirt_dispense_msgs::TShirtDispenseResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tshirt_dispense_msgs::TShirtDispenseResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
#result defintion\n\
int32 code\n\
\n\
";
  }

  static const char* value(const ::tshirt_dispense_msgs::TShirtDispenseResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tshirt_dispense_msgs::TShirtDispenseResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.code);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TShirtDispenseResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tshirt_dispense_msgs::TShirtDispenseResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tshirt_dispense_msgs::TShirtDispenseResult_<ContainerAllocator>& v)
  {
    s << indent << "code: ";
    Printer<int32_t>::stream(s, indent + "  ", v.code);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TSHIRT_DISPENSE_MSGS_MESSAGE_TSHIRTDISPENSERESULT_H
